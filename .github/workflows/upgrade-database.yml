name: Upgrade-database

on:
  workflow_call:
    inputs:
      run-group:
        description: 'Name of the github runner'
        required: true
        type: string

    secrets:
      VRPACKAGETOKEN:
        required: true

jobs:
  upgrade-database:
    runs-on: 
      group: ${{ inputs.run-group }}
    steps:
      - name: sleep
        run: /usr/bin/sleep 10

      - name: Clone VRFramework
        uses: actions/checkout@v3
        with:
          repository: vrsoftbr/VRFramework
          path: VRFramework
          token: ${{ secrets.VRPACKAGETOKEN }}
          fetch-depth: 0

      - name: "Checkout VRFramework Branch"
        run: |
          cd VRFramework
          branchLocal=$(git ls-remote --heads origin ${{ github.event.pull_request.head.ref }});
          if ! [ -z "$branchLocal" ]; then
                    branch=${{ github.event.pull_request.head.ref }}
            else
                    branch=${{ github.event.pull_request.base.ref }} 
            fi
            echo $branch;
            git checkout $branch;
      
      - name: Clone VRNFe
        uses: actions/checkout@v3
        with:
          repository: vrsoftbr/VRNFe
          path: VRNFe
          token: ${{ secrets.VRPACKAGETOKEN }}
          fetch-depth: 0

      - name: "Checkout VRNFe Branch"
        run: |
          cd VRNFe
          branchLocal=$(git ls-remote --heads origin ${{ github.event.pull_request.head.ref }});
          if ! [ -z "$branchLocal" ]; then
                    branch=${{ github.event.pull_request.head.ref }}
            else
                    branch=${{ github.event.pull_request.base.ref }} 
            fi
            echo $branch;
            git checkout $branch;

      - name: Clone VRWorkflow
        uses: actions/checkout@v3
        with:
          repository: vrsoftbr/VRWorkflow
          path: VRWorkflow
          token: ${{ secrets.VRPACKAGETOKEN }}
          fetch-depth: 0

      - name: "Checkout VRWorkflow Branch"
        run: |
          cd VRWorkflow
          branchLocal=$(git ls-remote --heads origin ${{ github.event.pull_request.head.ref }});
          if ! [ -z "$branchLocal" ]; then
                    branch=${{ github.event.pull_request.head.ref }}
            else
                    branch=${{ github.event.pull_request.base.ref }} 
            fi
            echo $branch;
            git checkout $branch;

      - name: Clone VRCore
        uses: actions/checkout@v3
        with:
          path: VRCore
          fetch-depth: 0

      - name: Clean Docker Container
        run: |
          export STATUSCONTAINER=$(docker container inspect -f '{{.State.Running}}' bancovrdatabase 2>/dev/null)

          echo $STATUSCONTAINER

          if [ -z $STATUSCONTAINER ]; then
              echo "Container de banco nÃ£o encontrado"
          else
              echo "Removendo banco VR"
              docker container stop bancovrdatabase
              docker container rm -f bancovrdatabase
          fi

      - name: Check .env file existence
        id: check_env
        uses: andstor/file-existence-action@v3
        with:
          files: '.env'
      
      - name: Clean .env file
        if: steps.check_env.outputs.files_exists == 'false'
        run: rm .env

      - name: Creating .env file
        if: steps.check_env.outputs.files_exists == 'false'
        run: |
          touch .env
          echo "IMAGE=postgres:13-alpine" >> .env
          echo "PASSWORD=VrPost@Server" >> .env
          echo "USER=postgres" >> .env
          echo "PORT=5432" >> .env
          echo "PATH_CONFIG_FILE=./docker/config/postgresql.conf" >> .env
          echo "PATH_BACKUP=./docker/bkp" >> .env
          echo "BACKUP_FILE_NAME=database.bkp" >> .env
          echo "PATH_INITIALIZATION_SCRIPTS=./docker/scripts/" >> .env
          
          cat .env

      - name: Run Docker Container from vrsoftbr/postgres
        run: |
          cd VRCore
          docker compose -f ./docker-compose.test.yml up -d
          sleep 10

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 8

      - name: Upgrade database
        run: |
          cd VRCore && ./gradlew atualizarTabelas
        env:
          USERNAME: ${{ github.actor }}
          TOKEN: ${{ secrets.VRPACKAGETOKEN }}