name: Create Release

on:
  workflow_call:
    secrets:
      VRPACKAGETOKEN:
        required: true
    inputs:
      versao:
        required: true
        type: string
    outputs:
      status:
        description: "The status of executin of workflow"
        value: ${{ jobs.create-release.outputs.status }}


jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.VRPACKAGETOKEN }}
        fetch-depth: 0
    
    - name: Echos & set ENV branch
      run: |
        BRANCH=${GITHUB_REF##*/}
        echo "Versao:" ${{ inputs.versao }}
        echo "branch_atual=$BRANCH" >> $GITHUB_ENV

    - name: Generate Changelog Content
      run: |
        QTD_VER=20
        ULTIMA_VERSAO=${{ inputs.versao }}

        TAGS=$(\
            git describe --tags \
            `git log --simplify-by-decoration --decorate --pretty=oneline --reverse \
            | fgrep 'tag: ' \
            | grep -o '^[a-z0-9]\+'` \
            --abbrev=0 \
            | tail -n $QTD_VER \
            | tr '\n' ' ' \
            | sed  's/ /../'\
            | sed 's/ /|/g'\
            | sed 's/\.\./|/g'\
            )

        TAGS+="HEAD"

        CHANGELOG="# CHANGELOG\n\n"
        CHANGELOG+="Esse arquivo é gerado automaticamente sempre que uma nova versão é lançada, por isso, não é necessário editá-lo.\n\n"
        CHANGELOG+="Alterado em: `date`\n\n"

        ULTIMA_NOTA_VERSAO=''

        IFS='|' # pipe is set as delimiter
        read -ra TAGS_ITEM <<< "$TAGS"   # str is read into an array as tokens separated by IFS

        LAST_ITEM=$((${#TAGS_ITEM[@]}-1))

        for (( i=0 ; i<${#TAGS_ITEM[@]} ; i++ )); do
            if [[ $i != $LAST_ITEM ]]; then 

                VERSAO="$([[ ${TAGS_ITEM[~i]} == "HEAD" ]] && echo $ULTIMA_VERSAO || echo ${TAGS_ITEM[~i]} | sed 's/v//g')"

                CHANGELOG+="## $VERSAO\n"

                INTERVAL="${TAGS_ITEM[~i-1]}..${TAGS_ITEM[~i]}"

                #obtem os hashes dos commits das ultimas tags criadas
                HASHES=$(git log $INTERVAL --format=%H --no-merges | tr '\n' '|')

                HASHES+="$HASHES_UNTAGED"
                SAVEIFS=$IFS   # Save current IFS
                IFS=$'|'      # Change IFS to new line
                HASHES=($HASHES) # split to array $HASHES
                IFS=$SAVEIFS   # Restore IFS

                NOTAS_ITEM=''
                NOTAS_BUG=''
                NOTAS_FEATURE=''

                for (( j=0; j<${#HASHES[@]}; j++ )); do
                    COMMITMSG=$(git log -1 --format=%B ${HASHES[$j]})
                    COMMITMSG=$(echo $COMMITMSG | sed "s/<rnf>/<RNF>/g; s/<\/rnf>/<\/RNF>/g")
                    COMMITMSG=$(echo $COMMITMSG | sed "s/<rnb>/<RNB>/g; s/<\/rnb>/<\/RNB>/g")
                    COMMITMSG=$(echo $COMMITMSG | tr '\n' ' ')

                    TAGB=$(echo $COMMITMSG | grep -o "<RNB>" | wc -l)
                    TAGBFINAL=$(echo $COMMITMSG | grep -o "</RNB>" | wc -l)
                    TAGF=$(echo $COMMITMSG | grep -o "<RNF>" | wc -l)
                    TAGFFINAL=$(echo $COMMITMSG | grep -o "</RNF>" | wc -l)


                    if [[ $COMMITMSG =~ ^[A-Z]{3}.[0-9]*.*RN[F|B].*\/RN[F|B] ]]; then
                        #obtem o número da tarefa que originou o commit
                        ISSUE=$(sed -E "s/(^[A-Z]{3}.[0-9]*).*(<RN[F|B]>)(.*)(<\/RN[F|B])(.*)/\1/g" <<< $(echo $COMMITMSG))

                        #obtem o tipo de tag
                        TYPE=$(sed -E "s/(^[A-Z]{3}.[0-9]*).*(<RN[F|B]>)(.*)(<\/RN[F|B])(.*)/\2/g" <<< $(echo $COMMITMSG))

                        # obtem somente o conteudo da tag sem espacos no inicio
                        TAG_CONTENT=$(sed -E "s/(^[A-Z]{3}.[0-9]*).*(<RN[F|B]>)(.*)(<\/RN[F|B])(.*)/\3/g" <<< $(echo $COMMITMSG))

                        # remove espaços em branco no inicio da string
                        TAG_CONTENT="$(echo $TAG_CONTENT | sed 's/^[[:space:]]*//g' | sed 's/  //g')"

                        # adicionar o traço (-) no inicio da string se não existir
                        TAG_CONTENT="$([[ $TAG_CONTENT == -* ]] && echo '' || echo '- ')$TAG_CONTENT"

                        if [[ $TYPE == "<RNF>" ]] && [[ $TAGF == $TAGFFINAL ]]; then
                            NOTAS_FEATURE+="$TAG_CONTENT ($ISSUE)\n"
                        elif [[ $TYPE == "<RNB>" ]] && [[ $TAGB == $TAGBFINAL ]]; then
                            NOTAS_BUG+="$TAG_CONTENT ($ISSUE)\n"
                        fi
                    fi    
                done

                if ! [ -z "$NOTAS_BUG" ]; then
                    NOTAS_ITEM+="\n**Correções**\n"
                    NOTAS_ITEM+="$NOTAS_BUG\n"
                fi

                if ! [ -z "$NOTAS_FEATURE" ]; then
                    NOTAS_ITEM+="\n**Novos Recursos**\n"
                    NOTAS_ITEM+="$NOTAS_FEATURE\n"
                fi

                if [ -z "$NOTAS_FEATURE" ] && [ -z "$NOTAS_BUG" ]; then
                    NOTAS_ITEM+="\n**Melhorias de performance e correções diversas**\n\n"
                fi

                if [ ${TAGS_ITEM[~i]} == "HEAD" ]; then
                    ULTIMA_NOTA_VERSAO="$NOTAS_ITEM"
                fi

                CHANGELOG+="$NOTAS_ITEM"
            fi
        done

        echo -e "$ULTIMA_NOTA_VERSAO" > NOTAS.txt
        echo -e "$CHANGELOG" > CHANGELOG.md
        
        echo 'NOTAS<<EOF' >> $GITHUB_ENV
        cat NOTAS.txt >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
        
        rm NOTAS.txt

    - name: Git Config
      run: git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com" && git config --global user.name "${GITHUB_ACTOR}" 

    - name: Git Commit and Push
      run: |
        git pull
        git add .
        git commit -m "Generate CHANGELOG.md (${{ inputs.versao }})"
        git push
    
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ inputs.versao }}
        tag: v${{ inputs.versao }}
        body: "${{ env.NOTAS }}"
        commit: "${{ env.branch_atual }}"
        draft: false
        prerelease: false
        token: ${{ secrets.VRPACKAGETOKEN }}

    - name: Set Summary
      run: |
        echo "Release de Versão" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
        echo "- Versão: ${{ inputs.versao }}" >> $GITHUB_STEP_SUMMARY
        echo "- [Release](https://github.com/${{ GITHUB_REPOSITORY }})" >> $GITHUB_STEP_SUMMARY
        echo "- [DockerHub](https://github.com/${{ GITHUB_REPOSITORY }})" >> $GITHUB_STEP_SUMMARY
    
